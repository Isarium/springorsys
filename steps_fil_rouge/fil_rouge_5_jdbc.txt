 
////////////////// Utilisation d'une base en mémoire

Ajouter dans le fichier pom.xml la dépendance H2 :
	<dependency>
		<groupId>com.h2database</groupId>
		<artifactId>h2</artifactId>
		<version>2.1.214</version>
	</dependency>

Ajouter la dépendance Spring jdbc :

	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-jdbc</artifactId>
		<version>6.0.9</version>
	</dependency>
	
/////////////// Création de la datasource

Ajouter dans la classe de configuration la datasource pour H2

	@Bean
    public DataSource dataSource() {
        JdbcDataSource ds = new JdbcDataSource();
        ds.setURL("jdbc:h2:~/myFirstH2Database;INIT=RUNSCRIPT FROM 'classpath:schema.sql'");
        ds.setUser("sa");
        ds.setPassword("sa");
        return ds;
    }

//////////// création de la table duplicatas

Créer un fichier schema.sql sous src/main/resources avec le contenu :
	create table if not exists duplicatas
	(
		id      uuid  default random_uuid() primary key,
		pdf_url varchar(255),
		user_id varchar(255),
		montant  int
	);
	

//////////////// Utilisation de la classe JdbcTemplate

JdbcTemplate est la classe de base Spring pour faire du sql 

L'objectif est réecrire le code de la case DuplicataService pour supprimer la liste et utiliser la base H2

AJouter le bean JdbcTemplate dans la configuration Spring (prend en paramètre la datasource):

	@Bean
	public JdbcTemplate jdbcTemplate() {
		return new JdbcTemplate(dataSource());
	}

Remplacer le contenu de la classe DuplicataService par :

			package com.formation.service;

			import java.sql.PreparedStatement;
			import java.sql.Statement;
			import java.util.List;
			import java.util.UUID;

			import org.springframework.beans.factory.annotation.Value;
			import org.springframework.jdbc.core.JdbcTemplate;
			import org.springframework.jdbc.support.GeneratedKeyHolder;
			import org.springframework.jdbc.support.KeyHolder;
			import org.springframework.stereotype.Component;

			import com.formation.domain.Duplicata;

			@Component
			public class DuplicataService {


			private UserService userService;

			private final JdbcTemplate jdbcTemplate;

			private String cdnUrl;

			public DuplicataService(UserService userService, JdbcTemplate jdbcTemplate, @Value("${cdn.url}") String cdnUrl) {
				this.jdbcTemplate = jdbcTemplate;
				this.userService = userService;
				this.cdnUrl = cdnUrl;
			}

			public Duplicata createDuplicata(String userId, int montant) {

				 String generatedPdfUrl = cdnUrl + "/images/default/sample.pdf";

					KeyHolder keyHolder = new GeneratedKeyHolder();

					jdbcTemplate.update(connection -> {
						PreparedStatement ps = connection
								.prepareStatement("insert into duplicatas (user_id, pdf_url, montant) values (?, ?, ?)",
										Statement.RETURN_GENERATED_KEYS);
						ps.setString(1, userId);  // 
						ps.setString(2, generatedPdfUrl);
						ps.setInt(3, montant);
						return ps;
					}, keyHolder);

					String uuid = !keyHolder.getKeys().isEmpty() ? ((UUID) keyHolder.getKeys().values().iterator().next()).toString()
							: null;

					Duplicata duplicata = new Duplicata();
					duplicata.setId(uuid);
					duplicata.setPdfurl(generatedPdfUrl);
					duplicata.setMontant(montant);
					duplicata.setUserid(userId);
					return duplicata;

			}

			public List<Duplicata> listDuplicatas() {
				return jdbcTemplate.query("select id, user_id, pdf_url, montant from duplicatas", (resultSet, rowNum) -> {
					Duplicata duplicata = new Duplicata();
					duplicata.setId(resultSet.getObject("id").toString());
					duplicata.setPdfurl(resultSet.getString("pdf_url"));
					duplicata.setUserid(resultSet.getString("user_id"));
					duplicata.setMontant(resultSet.getInt("amount"));
					return duplicata;
				});
			}

			}


tester que ça marche bien

////////////////// transactions 

Activation des transactions
	Annoter la classe de configuration avec @EnableTransactionManagement (permet l'utilisation de  @Transactional)
	
Configuration d'un TransactionManager => responsable de l'ouverture et du commit d'une transaction

	@Bean
	public TransactionManager platformTransactionManager() {
		return new DataSourceTransactionManager(dataSource());
	}

Annoter les méthodes createDuplicata et listDuplicatas de la classe DuplicataService avec @Transactional

Verifier en début des méthodes qu'une transaction est bien ouverte :
		System.out.println("Une transaction est t-il en cours? = " + TransactionSynchronizationManager.isActualTransactionActive());
		


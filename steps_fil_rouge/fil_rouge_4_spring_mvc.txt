 
/////////////// AJout d'un nouveau controlleur web
Supprimer la classe MonPremierControlleurSpring

Créer une classe WebControlleur annotée avec @Controller uniquement :
	@Controller
	public class WebControlleur {

		@GetMapping("/")
		public String homepage() {
			return "index.html";
		}
	}
	
Tester

/////////////// AJout d'un moteur de vue Thymeleaf

Ajouter la dépendance Thymeleaf

<dependency>
    <groupId>org.thymeleaf</groupId>
    <artifactId>thymeleaf-spring6</artifactId>
    <version>3.1.1.RELEASE</version>
</dependency>

/////////////// Beans à configurer pour que Thymeleaf marche 

Bean de type ThymeleafViewResolver => permet à Spring de trouver les tempaltes thymeleaf
Bean de type SpringTemplateEngine qui "branche" Spring et Thymeleaf

Ajouter dans la classe de configuration ces beans :
	
    @Bean
    public ThymeleafViewResolver viewResolver() {
        ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();
        viewResolver.setTemplateEngine(templateEngine());

        viewResolver.setOrder(1); // optionel
        viewResolver.setViewNames(new String[] {"*.html", "*.xhtml"}); // optionel
        return viewResolver;
    }

    @Bean
    public SpringTemplateEngine templateEngine() {
        SpringTemplateEngine templateEngine = new SpringTemplateEngine();
        templateEngine.setTemplateResolver(templateResolver());
        return templateEngine;
    }

    @Bean
    public SpringResourceTemplateResolver templateResolver() {
        SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver();
        templateResolver.setPrefix("classpath:/templates/");
        templateResolver.setCacheable(false);
        return templateResolver;
    }

/////////////// création templates
Créer un dossier src/main/resources/templates, un fichier index.html
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>First Thymeleaf Template</title>
	</head>
	<body>
	<h1>Bonjour</h1>

	<p>Mon premier template Spring.</p>
	</body>
	</html>
	
Tester

////////////////// Exemple Templates dynamiques

Remplacer le contenu de index.html par :

	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>Titre</title>
	</head>
	<body>
		<p>Bonjour
			<span th:text="${prenom}" th:remove="tag">[prenom]</span>,
			Voici la date actuelle
			<span th:text="${#temporals.format(dateActuelle, 'dd-MM-yyyy HH:mm')}">[dateActuelle]</span>
		</p>
		<div th:if="${username.startsWith('n')}">Votre nom commence par n!</div>
	</body>
	</html>

Remplacer la méthode mappée sur / dans WebControlleur par :

	@GetMapping("/")
    public String homepage(Model model, @RequestParam(required = false, defaultValue = "Individu") String prenom) {
        model.addAttribute("prenom", prenom);
        model.addAttribute("dateActuelle", LocalDateTime.now());
        return "index.html";
    }
	
////////////// formulaires 

Créer une classe FormulaireLogin (backing bean):

	package com.formation.web.formulaires;

	public class FormulaireConnexion {

		private String login, pwd;

		public String getLogin() {
			return login;
		}

		public void setLogin(String login) {
			this.login = login;
		}

		public String getPwd() {
			return pwd;
		}

		public void setPwd(String pwd) {
			this.pwd = pwd;
		}

	}
	
Créer une page formulaire dans le dossier templates :

	<!DOCTYPE HTML>
	<html xmlns:th="https://www.thymeleaf.org">
	<head>
		<title>Se connecter</title>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	</head>
	<body>
		<div th:if="${interdit}" style="background-color: red;">
			Désolé, <span th:text="${formulaireConnexion.login}">[login]</span>, tu ne rentreras pas!
		</div>

		<form th:action="@{/seconnecter}" th:object="${formulaireConnexion}" method="post">
			<p>login : <input type="text" th:field="*{login}" /></p>
			<p>mot de passe : <input type="password" th:field="*{pwd}" /></p>
			<p><input type="submit" value="se connecter" /></p>
		</form>
	</body>
	</html>

Ajouter deux méthodes dans le controlleur WebControlleur :
	
	@GetMapping("/seconnecter")
    public String seconnecter(Model model){
        model.addAttribute("formulaireConnexion", new FormulaireConnexion());
        return "formulaireConnexion.html";
    }
    
    @PostMapping("/seconnecter")
    public String seconnecter(@ModelAttribute FormulaireConnexion formulaireSoumis, Model model){
        if (formulaireSoumis.getLogin().equals(formulaireSoumis.getPwd())) {
            return "redirect:/";
        }
        model.addAttribute("Interdit", "true");
        return "formulaireConnexion.html";
    }

Tester et voir resultat

//////////////// validation des champs avec la JSR 303

AJouter dans les deux attributs de FormulaireConnexion les annotations :

 @NotBlank
 @Size(min = 5,  max = 20)
 
Remplacer la méthode annotée avec @PostMapping("/seconnecter") par :

	
	@PostMapping("/seconnecter")
	public String seconnecter(@ModelAttribute @Valid FormulaireConnexion formulaireSoumis, BindingResult bindingResult,
			Model model) {

		if (bindingResult.hasErrors()) {
			return "formulaireConnexion.html";
		}

		if (formulaireSoumis.getLogin().equals(formulaireSoumis.getPwd())) {
			return "redirect:/";
		}
		model.addAttribute("interdit", "true");
		return "formulaireConnexion.html";
	}
	
Changer l'affichage des champs de formulaires par :
		<p>login: <input type="text" th:field="*{login}" /></p>
		<p style="background-color:red" th:if="${#fields.hasErrors('login')}" th:errors="*{login}"></p>

		<p>mot de passe: <input type="pwd" th:field="*{pwd}" /></p>
		<p style="background-color:red" th:if="${#fields.hasErrors('pwd')}" th:errors="*{pwd}"></p>

Tester








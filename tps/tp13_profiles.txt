
======= comprendre les profiles avec Spring =======

Créer un nouveau projet maven 13_profiles

Ajouter la dépendance spring context dans le fichier pom.xml

Créer une classe Donnees avec les attributs urlCours, responsable, salleCours tous de type String
	Ajouter les getters/Setters pour tous les champs 
	générer la méthode toString

Créer une interface CursusConfig :
	public interface CursusConfig {
		public Donnees getDonneesCursus();
	}

Créer une classe MasterConfig implémentant CursusConfig
	Annoter la classe MasterConfig avec @Profile("master") et @Configuration
	Implémenter la méthode getDonneesCursus de MasterConfig en créant un objet de type Donnees et en initialisant ses attributs 
		(ex : donneesmaster.setResponsable("Responsable du master");
	Annoter la méthode getDonneesCursus avec @Bean("data")
	
Créer une classe LicenceConfig implémentant CursusConfig
	Annoter la classe LicenceConfig avec @Profile("licence") et @Configuration
	Implémenter la méthode getDonneesCursus de LicenceConfig en créant un objet de type Donnees et en initialisant ses attributs 
		(ex : donneesLicence.setResponsable("Responsable de la licence");
	Annoter la méthode getDonneesCursus avec @Bean("data") 
	
Créer une classe AppConfig
	@Configuration
	@ComponentScan(basePackages = "com.formation")
	public class AppConfig {		 
	 
	}

Créer une classe de test AppMain :
	public static void main(String args[]) {
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
		context.getEnvironment().setActiveProfiles("master");
		context.scan("com.formation");
		context.refresh();
		Donnees bean = (Donnees) context.getBean("data");
		System.out.println(bean);
		context.close();
	}

